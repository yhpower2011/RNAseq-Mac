#!/bin/bash

################################################################################
# RNA-seq Pipeline for macOS Automator
# For user with Trimmomatic installed as a .jar (no 'trimmomatic' executable).
# Paired-end reads with optional FastQC, trimming, STAR, featureCounts, DESeq2 + GO.
################################################################################

set -euo pipefail
IFS=$'\n\t'

######################## USER CONFIGURABLE VARIABLES ########################

# Path to the Trimmomatic .jar
# Example: /usr/local/Trimmomatic-0.39/trimmomatic-0.39.jar
TRIMMOMATIC_JAR="/path/to/Trimmomatic-0.39.jar"

# Path to adapter sequences for Trimmomatic
# Example: /usr/local/Trimmomatic-0.39/adapters/TruSeq3-PE.fa
ADAPTERS_FA="/path/to/TruSeq3-PE.fa"

# STAR genome index directory (already generated)
GENOME_INDEX="/path/to/STARindex"

# GTF annotation file
GTF_ANNOTATION="/path/to/annotation.gtf"

# Number of CPU threads to use
THREADS=4

# Toggle running FastQC on raw FASTQs
RUN_FASTQC=true

######################## END USER VARIABLES ########################

# Check for required commands
command -v java >/dev/null 2>&1 || {
  echo "ERROR: Java not found. It's required for Trimmomatic (.jar)" >&2
  exit 1
}

command -v fastqc >/dev/null 2>&1 || {
  if $RUN_FASTQC; then
    echo "WARNING: fastqc not in PATH -> skipping FastQC." >&2
    RUN_FASTQC=false
  fi
}

command -v STAR >/dev/null 2>&1 || {
  echo "ERROR: STAR not found in PATH." >&2
  exit 1
}

command -v samtools >/dev/null 2>&1 || {
  echo "ERROR: samtools not found in PATH." >&2
  exit 1
}

command -v featureCounts >/dev/null 2>&1 || {
  echo "ERROR: featureCounts not found in PATH." >&2
  exit 1
}

command -v Rscript >/dev/null 2>&1 || {
  echo "ERROR: Rscript not found in PATH." >&2
  exit 1
}

# Verify Trimmomatic .jar file is present
if [[ ! -f "$TRIMMOMATIC_JAR" ]]; then
  echo "ERROR: Trimmomatic .jar not found at '$TRIMMOMATIC_JAR'." >&2
  exit 1
fi

# We'll define the Trimmomatic command as a Java call
TRIM_CMD="java -jar '$TRIMMOMATIC_JAR'"

################################################################################
# Usage: Provide project folder(s) as arguments in Automator. E.g.:
# $ /path/to/this_script.sh /Users/username/Desktop/RNAseq-a /Users/username/Desktop/RNAseq-b
################################################################################

if [[ $# -eq 0 ]]; then
  echo "Usage: $0 <project_folder1> [project_folder2 ...]" >&2
  exit 1
fi

for project_dir in "$@"; do
    echo "===== Processing project: $project_dir ====="
    if [[ ! -d "$project_dir" ]]; then
        echo "ERROR: Project directory '$project_dir' not found." >&2
        exit 1
    fi
    raw_dir="$project_dir/raw_data"
    if [[ ! -d "$raw_dir" ]]; then
        echo "ERROR: No 'raw_data' folder in '$project_dir'." >&2
        exit 1
    fi

    # Define output directories
    fastqc_dir="$project_dir/fastqc_results"
    trim_dir="$project_dir/trimmed_data"
    align_dir="$project_dir/alignment"
    counts_dir="$project_dir/counts"
    analysis_dir="$project_dir/analysis"

    mkdir -p "$fastqc_dir" "$trim_dir" "$align_dir" "$counts_dir" "$analysis_dir"

    #-----------------------------------------------------------
    # 1) FastQC (optional)
    #-----------------------------------------------------------
    if $RUN_FASTQC; then
        echo "[Step 1] Running FastQC on raw FASTQ files..."
        for fq in "$raw_dir"/*.fastq.gz; do
            fq_base="$(basename "$fq")"
            out_html="$fastqc_dir/${fq_base%.fastq.gz}_fastqc.html"
            out_zip="$fastqc_dir/${fq_base%.fastq.gz}_fastqc.zip"
            if [[ -f "$out_html" && -f "$out_zip" ]]; then
                echo "FastQC already done for $fq_base -> skipping."
            else
                echo "FastQC -> $fq_base"
                fastqc --threads "$THREADS" -o "$fastqc_dir" "$fq" || {
                  echo "ERROR: FastQC failed for $fq_base." >&2
                  exit 1
                }
            fi
        done
    else
        echo "[Step 1] Skipping FastQC (RUN_FASTQC=false)."
    fi

    #-----------------------------------------------------------
    # 2) Trimmomatic for paired-end read trimming
    #-----------------------------------------------------------
    echo "[Step 2] Trimming adapters/low-Q reads with Trimmomatic..."
    shopt -s nullglob
    R1_list=("$raw_dir"/*_R1.fastq.gz)
    if [[ ${#R1_list[@]} -eq 0 ]]; then
        echo "ERROR: No *_R1.fastq.gz files found in $raw_dir." >&2
        exit 1
    fi
    for R1 in "${R1_list[@]}"; do
        sample="$(basename "$R1" _R1.fastq.gz)"
        R2="$raw_dir/${sample}_R2.fastq.gz"
        if [[ ! -f "$R2" ]]; then
            echo "ERROR: Missing R2 for sample $sample." >&2
            exit 1
        fi
        paired_R1="$trim_dir/${sample}_R1_paired.fq.gz"
        unpaired_R1="$trim_dir/${sample}_R1_unpaired.fq.gz"
        paired_R2="$trim_dir/${sample}_R2_paired.fq.gz"
        unpaired_R2="$trim_dir/${sample}_R2_unpaired.fq.gz"

        if [[ -f "$paired_R1" && -f "$paired_R2" ]]; then
            echo "Trimmomatic outputs for $sample exist, skipping."
        else
            echo "Trimming $sample..."
            rm -f "$paired_R1" "$unpaired_R1" "$paired_R2" "$unpaired_R2"
            $TRIM_CMD PE \
                -threads "$THREADS" \
                -phred33 \
                "$R1" "$R2" \
                "$paired_R1" "$unpaired_R1" \
                "$paired_R2" "$unpaired_R2" \
                ILLUMINACLIP:"$ADAPTERS_FA":2:30:10 SLIDINGWINDOW:4:20 MINLEN:36 || {
                  echo "ERROR: Trimmomatic failed for $sample" >&2
                  exit 1
                }
            # Check outputs
            [[ -s "$paired_R1" && -s "$paired_R2" ]] || {
              echo "ERROR: Some trimmed files for $sample are missing/empty." >&2
              exit 1
            }
            echo "Trimming done for $sample."
        fi
    done

    #-----------------------------------------------------------
    # 3) STAR alignment
    #-----------------------------------------------------------
    echo "[Step 3] Aligning with STAR..."
    for f1 in "$trim_dir"/*_R1_paired.fq.gz; do
        samp="$(basename "$f1" _R1_paired.fq.gz)"
        f2="$trim_dir/${samp}_R2_paired.fq.gz"
        [[ -f "$f2" ]] || {
          echo "ERROR: paired R2 not found for $samp in $trim_dir." >&2
          exit 1
        }
        sortedbam="$align_dir/${samp}_sorted.bam"
        if [[ -f "$sortedbam" ]]; then
            echo "STAR alignment done for $samp -> skipping."
        else
            echo "Aligning $samp with STAR..."
            STAR --runThreadN "$THREADS" \
                 --genomeDir "$GENOME_INDEX" \
                 --readFilesIn "$f1" "$f2" \
                 --readFilesCommand zcat \
                 --outFileNamePrefix "$align_dir/${samp}_" \
                 --outSAMtype BAM Unsorted || {
               echo "ERROR: STAR failed for $samp" >&2
               exit 1
            }
            unsorted="$align_dir/${samp}_Aligned.out.bam"
            [[ -f "$unsorted" ]] || {
              echo "ERROR: STAR output not found: $unsorted" >&2
              exit 1
            }
            samtools sort -@ "$THREADS" -o "$sortedbam" "$unsorted"
            rm -f "$unsorted"
            samtools index "$sortedbam"
            echo "STAR alignment done for $samp."
        fi
    done

    #-----------------------------------------------------------
    # 4) featureCounts
    #-----------------------------------------------------------
    echo "[Step 4] Counting reads with featureCounts..."
    counts_file="$counts_dir/gene_counts.txt"
    if [[ -f "$counts_file" ]]; then
        echo "featureCounts output exists -> skipping."
    else
        bam_list=("$align_dir"/*_sorted.bam)
        [[ ${#bam_list[@]} -eq 0 ]] && {
          echo "ERROR: No sorted BAMs found in $align_dir." >&2
          exit 1
        }
        echo "Running featureCounts..."
        featureCounts -T "$THREADS" -p -B -C \
            -a "$GTF_ANNOTATION" -o "$counts_file" "${bam_list[@]}" || {
          echo "ERROR: featureCounts failed." >&2
          exit 1
        }
        [[ -s "$counts_file" ]] || {
          echo "ERROR: gene_counts.txt is missing or empty." >&2
          exit 1
        }
        echo "featureCounts done, output: $counts_file"
    fi

    #-----------------------------------------------------------
    # 5) DESeq2 + GO analysis in R
    #-----------------------------------------------------------
    echo "[Step 5] Running DESeq2 + GO enrichment..."
    mkdir -p "$analysis_dir"
    deseq_csv="$analysis_dir/deseq2_results.csv"
    go_csv="$analysis_dir/GO_enrichment_results.csv"
    if [[ -f "$deseq_csv" && -f "$go_csv" ]]; then
        echo "DESeq2 & GO results exist -> skipping."
    else
        echo "Running R script for DESeq2 + GO..."
        Rscript - <<RSCRIPT
suppressMessages(library(DESeq2))
suppressMessages(library(clusterProfiler))
suppressMessages(library(org.Mm.eg.db)) # Using mouse OrgDb as example
suppressMessages(library(ggplot2))

counts <- read.table("$counts_file", header=TRUE, sep="\t", comment.char="#", check.names=FALSE)
# featureCounts columns: Geneid, Chr, Start, End, Strand, Length, sample1, sample2...
count_data <- counts[,7:ncol(counts)]
rownames(count_data) <- counts\$Geneid
colnames(count_data) <- sub(".sorted.bam$", "", colnames(count_data))

# Build conditions from colnames (assume 'control' or 'treatment')
sample_names <- colnames(count_data)
conditions <- ifelse(grepl("control", sample_names, ignore.case=TRUE), "control",
              ifelse(grepl("treatment", sample_names, ignore.case=TRUE), "treatment", "unknown"))
conditions <- factor(conditions)

col_data <- data.frame(row.names=sample_names, condition=conditions)
dds <- DESeqDataSetFromMatrix(count_data, colData=col_data, design=~condition)
dds <- DESeq(dds)
res <- results(dds, alpha=0.05)
res <- res[order(res\$padj), ]
res_df <- as.data.frame(res)

write.csv(res_df, file="$deseq_csv", row.names=TRUE)

# PCA
vsd <- vst(dds)
pca_data <- plotPCA(vsd, "condition", returnData=TRUE)
percentVar <- round(100 * attr(pca_data, "percentVar"))
p <- ggplot(pca_data, aes(PC1, PC2, color=condition)) +
     geom_point(size=3) +
     xlab(paste0("PC1: ", percentVar[1], "% variance")) +
     ylab(paste0("PC2: ", percentVar[2], "% variance"))
ggsave("$analysis_dir/PCA_plot.png", p, width=6, height=5)

# MA plot
png("$analysis_dir/MA_plot.png", width=800, height=600)
plotMA(res, main="DESeq2 MA-Plot", ylim=c(-5,5))
dev.off()

# Volcano
res_df\$minusLog10P <- -log10(res_df\$pvalue)
res_df\$signif <- !is.na(res_df\$padj) & (res_df\$padj < 0.05)
png("$analysis_dir/Volcano_plot.png", width=800, height=600)
with(res_df, plot(log2FoldChange, minusLog10P, pch=20,
                  col=ifelse(signif, "red", "gray"),
                  xlab="Log2 Fold Change", ylab="-Log10 p-value", main="Volcano"))
dev.off()

# GO
sig_genes <- rownames(res_df)[res_df\$signif]
if (length(sig_genes)==0) {
   message("No significant genes for GO.")
   write.csv(data.frame(Message="No significant genes"), "$go_csv")
   quit()
}

# If using ENSEMBL IDs that have versions (e.g. ENSMUSG0000.XX), remove versions if needed:
# sig_genes <- sub("\\..*$", "", sig_genes)
# etc.

all_genes <- rownames(res_df)
# all_genes <- sub("\\..*$", "", all_genes)

ego <- enrichGO(gene=sig_genes,
                universe=all_genes,
                OrgDb=org.Mm.eg.db,
                keyType="ENSEMBL", # or 'SYMBOL' if you have symbol columns
                ont="BP",
                pAdjustMethod="BH",
                pvalueCutoff=0.05,
                qvalueCutoff=0.05)
ego_df <- as.data.frame(ego)
write.csv(ego_df, file="$go_csv", row.names=FALSE)

if (nrow(ego_df)>0) {
   png("$analysis_dir/GO_enrichment_top10.png", width=800, height=600)
   print(dotplot(ego, showCategory=10) + ggtitle("Top GO terms"))
   dev.off()
}
RSCRIPT
    fi
    echo "===== Done with project: $project_dir ====="
done

echo "All pipeline steps completed successfully."
