#!/bin/bash

##############################################################################
# Script: RNA-seq pipeline with resume logic (macOS Automator compatible)
##############################################################################

set -euo pipefail  # Exit on error/undefined variable/pipeline error

# Automator’s environment is often minimal, so expand PATH
export PATH="/usr/local/bin:/opt/homebrew/bin:/usr/bin:/bin:/usr/sbin:/sbin:$PATH"

# If $HOME is missing, define it
if [ -z "${HOME:-}" ]; then
    HOME="/Users/$(whoami)"
fi

# Check for required commands
REQUIRED_CMDS=( curl gunzip fastqc trimmomatic STAR samtools featureCounts Rscript )
for cmd in "${REQUIRED_CMDS[@]}"; do
    if ! command -v "$cmd" >/dev/null 2>&1; then
        echo "ERROR: Required tool '$cmd' not found in PATH. Please install or fix PATH."
        exit 1
    fi
done

# Attempt to find Trimmomatic’s TruSeq3-PE adapter file
ADAPTER_FILE=""
if command -v brew >/dev/null 2>&1; then
    BREW_PREFIX="$(brew --prefix)"
    if [ -f "$BREW_PREFIX/share/trimmomatic/adapters/TruSeq3-PE.fa" ]; then
        ADAPTER_FILE="$BREW_PREFIX/share/trimmomatic/adapters/TruSeq3-PE.fa"
    fi
fi
# Fallback location if not found
if [ -z "$ADAPTER_FILE" ]; then
    ADAPTER_FILE="/usr/local/share/trimmomatic/adapters/TruSeq3-PE.fa"
fi
if [ ! -f "$ADAPTER_FILE" ]; then
    echo "WARNING: Trimmomatic adapter file not found at '$ADAPTER_FILE'."
    echo "Please adjust ADAPTER_FILE if needed."
fi

# Base directory (default: Desktop)
BASE_DIR="${BASE_DIR:-$HOME/Desktop}"
mkdir -p "$BASE_DIR"
cd "$BASE_DIR"

# Detect CPU cores
CPU_CORES="$(/usr/sbin/sysctl -n hw.logicalcpu 2>/dev/null || echo 8)"
THREADS="$CPU_CORES"
echo "[INFO] Detected $THREADS CPU cores. Using up to $THREADS threads."

# Projects to run
projects=( "RNAseq-a" "RNAseq-b" "RNAseq-c" )

# Create directories
for proj in "${projects[@]}"; do
    mkdir -p "$proj/raw_data" \
             "$proj/fastqc_results" \
             "$proj/trimmed_data" \
             "$proj/alignment" \
             "$proj/counts" \
             "$proj/analysis"
done
echo "[INFO] Created directories for projects: ${projects[*]}"

# Prepare reference (if missing)
mkdir -p reference
GENOME_FA="reference/genome.fa"
GTF_FILE="reference/annotation.gtf"

GENOME_URL="https://ftp.ebi.ac.uk/pub/databases/gencode/Gencode_mouse/release_M36/GRCm39.primary_assembly.genome.fa.gz"
GTF_URL="https://ftp.ebi.ac.uk/pub/databases/gencode/Gencode_mouse/release_M36/gencode.vM36.primary_assembly.annotation.gtf.gz"

# Download if missing
if [ ! -f "$GENOME_FA" ] && [ ! -f "${GENOME_FA}.gz" ]; then
    echo "[INFO] Downloading mouse genome FASTA..."
    curl -sSL -o "${GENOME_FA}.gz" "$GENOME_URL"
fi
if [ ! -f "$GTF_FILE" ] && [ ! -f "${GTF_FILE}.gz" ]; then
    echo "[INFO] Downloading GENCODE mouse annotation GTF..."
    curl -sSL -o "${GTF_FILE}.gz" "$GTF_URL"
fi

# Decompress if necessary
if [ -f "${GENOME_FA}.gz" ] && [ ! -f "$GENOME_FA" ]; then
    gunzip -c "${GENOME_FA}.gz" > "$GENOME_FA"
fi
if [ -f "${GTF_FILE}.gz" ] && [ ! -f "$GTF_FILE" ]; then
    gunzip -c "${GTF_FILE}.gz" > "$GTF_FILE"
fi

# Build STAR index if not already done
if [ ! -d "reference/STARindex" ]; then
    echo "[INFO] Building STAR index in reference/STARindex..."
    mkdir -p reference/STARindex
    STAR --runThreadN "$THREADS" \
         --runMode genomeGenerate \
         --genomeDir reference/STARindex \
         --genomeFastaFiles "$GENOME_FA" \
         --sjdbGTFfile "$GTF_FILE" \
         --sjdbOverhang 149
    echo "[INFO] STAR index built."
fi

##############################################################################
# Main loop over projects
##############################################################################

for proj in "${projects[@]}"; do
    echo "=== Processing project: $proj ==="

    # Check for raw FASTQ files
    if compgen -G "$proj/raw_data/*_R1*.fastq*" > /dev/null; then

        #-----------------------
        # 1. FastQC
        #-----------------------
        echo "[INFO] Checking if FastQC outputs exist for $proj..."
        if compgen -G "$proj/fastqc_results/*_fastqc.html" > /dev/null; then
            echo "    FastQC results found → skipping FastQC."
        else
            echo "    Running FastQC on raw reads..."
            fastqc -t "$THREADS" -o "$proj/fastqc_results" "$proj/raw_data"/*fastq* >/dev/null 2>&1
            echo "    FastQC done."
        fi

        #-----------------------
        # 2. Trimmomatic
        #-----------------------
        echo "[INFO] Trimming adapters/low-quality reads for $proj..."
        for f1 in "$proj/raw_data/"*_R1*.fastq*; do
            f2="${f1/_R1/_R2}"  # mate
            sampleName="$(basename "$f1")"
            sampleName="${sampleName%%_R1*}"
            out1="$proj/trimmed_data/${sampleName}_R1_trimmed_paired.fastq.gz"
            out2="$proj/trimmed_data/${sampleName}_R2_trimmed_paired.fastq.gz"
            out1_un="$proj/trimmed_data/${sampleName}_R1_trimmed_unpaired.fastq.gz"
            out2_un="$proj/trimmed_data/${sampleName}_R2_trimmed_unpaired.fastq.gz"

            if [ -f "$out1" ] && [ -f "$out2" ]; then
                echo "    Trimmed FASTQs for '$sampleName' found → skipping."
            else
                echo "    Trimming sample '$sampleName'..."
                trimmomatic PE -threads "$THREADS" -phred33 \
                    "$f1" "$f2" \
                    "$out1" "$out1_un" "$out2" "$out2_un" \
                    ILLUMINACLIP:"$ADAPTER_FILE":2:30:10 SLIDINGWINDOW:4:20 MINLEN:36
            fi
        done

        #-----------------------
        # 3. STAR alignment
        # 4. Samtools sort/index
        #-----------------------
        echo "[INFO] Aligning and sorting for $proj..."
        for f1 in "$proj/trimmed_data/"*_R1_trimmed_paired.fastq.gz; do
            sampleBase="$(basename "$f1" "_R1_trimmed_paired.fastq.gz")"
            f2="${f1/_R1_trimmed_paired/_R2_trimmed_paired}"
            sortedBam="$proj/alignment/${sampleBase}_sorted.bam"

            if [ -f "$sortedBam" ]; then
                echo "    Sorted BAM for '$sampleBase' found → skipping STAR."
            else
                echo "    STAR alignment for '$sampleBase'..."
                STAR --runThreadN "$THREADS" \
                     --genomeDir reference/STARindex \
                     --readFilesIn "$f1" "$f2" \
                     --readFilesCommand zcat \
                     --outFileNamePrefix "$proj/alignment/${sampleBase}_" \
                     --outSAMtype BAM Unsorted

                # STAR outputs an unsorted BAM
                unsorted="$proj/alignment/${sampleBase}_Aligned.out.bam"

                # Sort & index
                samtools sort -@ "$THREADS" -o "$sortedBam" "$unsorted"
                samtools index -@ "$THREADS" "$sortedBam"
                rm -f "$unsorted"
            fi
        done

        #-----------------------
        # 5. featureCounts
        #-----------------------
        COUNT_TXT="$proj/counts/gene_counts.txt"
        echo "[INFO] Checking featureCounts for $proj..."
        if [ -f "$COUNT_TXT" ]; then
            echo "    Gene counts found → skipping featureCounts."
        else
            echo "    Running featureCounts..."
            featureCounts -T "$THREADS" -p -t exon -g gene_id \
                -a "$GTF_FILE" \
                -o "$COUNT_TXT" \
                "$proj/alignment/"*_sorted.bam
        fi

        #-----------------------
        # 6. DESeq2 + GO analysis
        #-----------------------
        DESEQ2_CSV="$proj/analysis/deseq2_results.csv"
        if [ -f "$DESEQ2_CSV" ]; then
            echo "    DESeq2 results exist → skipping R analysis."
        else
            echo "    Running DESeq2 + GO enrichment in R..."
            # We'll run Rscript with heredoc from stdin:
            pushd "$proj" >/dev/null

            Rscript - <<'RSCRIPT'
suppressMessages(library(DESeq2))
suppressMessages(library(clusterProfiler))
suppressMessages(library(org.Mm.eg.db))

count_data <- read.table("counts/gene_counts.txt", header=TRUE, sep="\t", comment.char="#")
rownames(count_data) <- count_data$Geneid

to_drop <- c("Geneid","Chr","Start","End","Strand","Length")
count_data <- count_data[, !(colnames(count_data) %in% to_drop)]

# Clean sample names
colnames(count_data) <- sub("\\.sorted\\.bam$", "", sub("\\.bam$", "", colnames(count_data)))

samples <- colnames(count_data)
conditions <- ifelse(grepl("control", samples, ignore.case=TRUE), "control",
              ifelse(grepl("treatment", samples, ignore.case=TRUE), "treatment", NA))
conditions <- factor(conditions)
coldata <- data.frame(row.names=samples, condition=conditions)

dds <- DESeqDataSetFromMatrix(countData=count_data, colData=coldata, design=~condition)
dds <- DESeq(dds)
res <- results(dds, alpha=0.05)
res <- res[order(res$padj),]
res_df <- as.data.frame(res)

dir.create("analysis", showWarnings=FALSE)
write.csv(res_df, file="analysis/deseq2_results.csv")

# PCA
vsd <- vst(dds)
png("analysis/PCA_plot.png", width=800, height=600)
plotPCA(vsd, intgroup="condition")
dev.off()

# MA plot
png("analysis/MA_plot.png", width=800, height=600)
plotMA(res, main="DESeq2 MA-Plot", ylim=c(-5,5))
dev.off()

# Volcano
res_df$minusLog10P <- -log10(res_df$pvalue)
res_df$signif <- !is.na(res_df$padj) & res_df$padj < 0.05
png("analysis/Volcano_plot.png", width=800, height=600)
with(res_df, plot(log2FoldChange, minusLog10P, pch=20,
     col=ifelse(signif, "red", "gray"),
     xlab="Log2 Fold Change", ylab="-Log10 p-value", main="Volcano Plot"))
dev.off()

# GO enrichment
sig_genes <- rownames(res_df)[res_df$signif]
ego <- enrichGO(gene=sig_genes, OrgDb=org.Mm.eg.db, keyType="ENSEMBL", ont="BP",
                pAdjustMethod="BH", pvalueCutoff=0.05, qvalueCutoff=0.05)
ego_df <- as.data.frame(ego)
write.csv(ego_df, file="analysis/GO_enrichment_results.csv")

if (nrow(ego_df) > 0) {
    png("analysis/GO_enrichment_top10.png", width=800, height=600)
    print(dotplot(ego, showCategory=10) + ggplot2::ggtitle("Top 10 GO terms"))
    dev.off()
}
RSCRIPT

            popd >/dev/null
            echo "    DESeq2 + GO analysis completed for $proj."
        fi

    else
        echo "[INFO] No FASTQ files found in $proj/raw_data → skipping $proj."
    fi

    echo "=== Finished processing $proj ==="
done

echo "=== RNA-seq pipeline completed successfully. ==="
