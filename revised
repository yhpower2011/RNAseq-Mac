#!/bin/bash

###############################################################################
# RNA-seq Pipeline Script - macOS Automator Friendly
#
# Incorporates feedback for better error handling, logging, multiQC, etc.
###############################################################################

# -e: exit on error
# -u: treat unset variables as errors
# -o pipefail: propagate errors in pipe
# -x (optional for debug) â€“ show commands
set -euo pipefail

# Provide line number in error messages
trap 'echo "[ERROR] On line $LINENO of $0" >&2' ERR

# Field separator for safer loops
IFS=$'\n\t'

################### USER CONFIGURABLE VARIABLES ####################

# Path to Trimmomatic jar (since you said you only have the .jar)
TRIMMOMATIC_JAR="/path/to/Trimmomatic-0.39.jar"

# Path to adapter file for Trimmomatic
ADAPTERS_FA="/path/to/TruSeq3-PE.fa"

# Path to STAR genome index
GENOME_INDEX="/path/to/STARindex"

# Path to GTF annotation
GTF_ANNOTATION="/path/to/annotation.gtf"

# Number of CPU threads
THREADS=8  # e.g., your iMac Pro might do 8 or 16

# Toggle running FastQC
RUN_FASTQC=true

# Strandedness for featureCounts: 0=unstranded, 1=stranded, 2=reversely stranded
# Set this to match your library prep. Most Illumina kits are unstranded (0)
STRANDEDNESS=0

################### END USER VARIABLES ####################

# Verify essential commands
command -v java >/dev/null 2>&1 || {
  echo "[ERROR] Java not found in PATH (required for .jar Trimmomatic)" >&2
  exit 1
}
command -v STAR >/dev/null 2>&1 || {
  echo "[ERROR] STAR not found in PATH." >&2
  exit 1
}
command -v samtools >/dev/null 2>&1 || {
  echo "[ERROR] samtools not found in PATH." >&2
  exit 1
}
command -v featureCounts >/dev/null 2>&1 || {
  echo "[ERROR] featureCounts not found in PATH." >&2
  exit 1
}
command -v Rscript >/dev/null 2>&1 || {
  echo "[ERROR] Rscript not found in PATH." >&2
  exit 1
}

# Check multiqc if you want multiQC
command -v multiqc >/dev/null 2>&1 || {
  echo "[WARNING] multiqc not found - multiQC step will be skipped." >&2
  RUN_MULTIQC=false
}
RUN_MULTIQC=true  # set this to false if you DO NOT want MultiQC

# Check Trimmomatic .jar
if [[ ! -f "$TRIMMOMATIC_JAR" ]]; then
  echo "[ERROR] Trimmomatic jar not found at '$TRIMMOMATIC_JAR'." >&2
  exit 1
fi

TRIM_CMD="java -jar '$TRIMMOMATIC_JAR'"

# If no arguments, show usage
if [[ $# -eq 0 ]]; then
  echo "Usage: $0 <project_folder1> [project_folder2 ...]" >&2
  exit 1
fi

###################################
# LOG FUNCTION
###################################
log() {
  # Writes to both stdout and the project-specific log file
  local msg="$1"
  echo "$(date '+%Y-%m-%d %H:%M:%S')  $msg"
  echo "$(date '+%Y-%m-%d %H:%M:%S')  $msg" >> "$LOG_FILE"
}

for project_dir in "$@"; do
  echo "===== Starting project: $project_dir ====="
  if [[ ! -d "$project_dir" ]]; then
    echo "[ERROR] Project dir '$project_dir' does not exist." >&2
    exit 1
  fi

  # Prepare directories
  raw_dir="$project_dir/raw_data"
  fastqc_dir="$project_dir/fastqc_results"
  trim_dir="$project_dir/trimmed_data"
  align_dir="$project_dir/alignment"
  counts_dir="$project_dir/counts"
  analysis_dir="$project_dir/analysis"
  logs_dir="$project_dir/logs"

  mkdir -p "$fastqc_dir" "$trim_dir" "$align_dir" "$counts_dir" "$analysis_dir" "$logs_dir"

  # Each project gets a log file
  LOG_FILE="$logs_dir/pipeline.log"
  touch "$LOG_FILE"

  log "=== Project: $project_dir ==="
  # raw_data must exist
  if [[ ! -d "$raw_dir" ]]; then
    log "[ERROR] No raw_data in $project_dir"
    exit 1
  fi

  #################### Step 1: FastQC (optional) ####################
  if $RUN_FASTQC; then
    log "[Step 1] Running FastQC..."
    for fq in "$raw_dir"/*.fastq.gz; do
      fq_base="$(basename "$fq")"
      out_html="$fastqc_dir/${fq_base%.fastq.gz}_fastqc.html"
      out_zip="$fastqc_dir/${fq_base%.fastq.gz}_fastqc.zip"
      if [[ -f "$out_html" && -f "$out_zip" ]]; then
        log "FastQC done for $fq_base -> skipping"
      else
        log "FastQC -> $fq_base"
        fastqc --threads "$THREADS" -o "$fastqc_dir" "$fq" \
          && log "FastQC success: $fq_base" \
          || { log "[ERROR] FastQC failed: $fq_base"; exit 1; }
      fi
    done
  else
    log "[Step 1] Skipping FastQC"
  fi

  #################### Step 2: Trimmomatic ####################
  log "[Step 2] Trimming with Trimmomatic..."
  shopt -s nullglob
  R1_list=("$raw_dir"/*_R1.fastq.gz)
  if [[ ${#R1_list[@]} -eq 0 ]]; then
    log "[ERROR] No *_R1.fastq.gz in $raw_dir"
    exit 1
  fi
  for R1 in "${R1_list[@]}"; do
    sample="$(basename "$R1" _R1.fastq.gz)"
    R2="$raw_dir/${sample}_R2.fastq.gz"
    if [[ ! -f "$R2" ]]; then
      log "[ERROR] Missing R2 for $sample in $raw_dir"
      exit 1
    fi
    paired_R1="$trim_dir/${sample}_R1_paired.fq.gz"
    unpaired_R1="$trim_dir/${sample}_R1_unpaired.fq.gz"
    paired_R2="$trim_dir/${sample}_R2_paired.fq.gz"
    unpaired_R2="$trim_dir/${sample}_R2_unpaired.fq.gz"

    if [[ -f "$paired_R1" && -f "$paired_R2" ]]; then
      log "Trimmomatic outputs for $sample exist -> skipping"
    else
      log "Trimming $sample..."
      rm -f "$paired_R1" "$unpaired_R1" "$paired_R2" "$unpaired_R2"
      $TRIM_CMD PE -threads "$THREADS" -phred33 \
        "$R1" "$R2" \
        "$paired_R1" "$unpaired_R1" \
        "$paired_R2" "$unpaired_R2" \
        ILLUMINACLIP:"$ADAPTERS_FA":2:30:10 SLIDINGWINDOW:4:20 MINLEN:36 \
        && log "Trimming success for $sample" \
        || { log "[ERROR] Trimmomatic failed for $sample"; exit 1; }

      # Check outputs
      [[ -s "$paired_R1" && -s "$paired_R2" ]] || {
        log "[ERROR] Some trimmed files for $sample are missing/empty."
        exit 1
      }
      # If you want to discard unpaired reads:
      # rm -f "$unpaired_R1" "$unpaired_R2"
    fi
  done

  #################### Step 3: STAR Alignment ####################
  log "[Step 3] Aligning with STAR..."
  for r1 in "$trim_dir"/*_R1_paired.fq.gz; do
    base="$(basename "$r1" _R1_paired.fq.gz)"
    r2="$trim_dir/${base}_R2_paired.fq.gz"
    if [[ ! -f "$r2" ]]; then
      log "[ERROR] Trimmed R2 not found for $base in $trim_dir"
      exit 1
    fi
    sortedbam="$align_dir/${base}_sorted.bam"
    if [[ -f "$sortedbam" ]]; then
      log "STAR alignment already done for $base -> skipping"
    else
      log "Aligning $base with STAR..."
      STAR --runThreadN "$THREADS" \
           --genomeDir "$GENOME_INDEX" \
           --readFilesIn "$r1" "$r2" \
           --readFilesCommand zcat \
           --outFileNamePrefix "$align_dir/${base}_" \
           --outSAMtype BAM Unsorted \
        && log "STAR success: $base" \
        || { log "[ERROR] STAR failed for $base"; exit 1; }
      unsorted="$align_dir/${base}_Aligned.out.bam"
      [[ -f "$unsorted" ]] || {
        log "[ERROR] STAR output missing: $unsorted"
        exit 1
      }
      # Sort
      samtools sort -@ "$THREADS" -o "$sortedbam" "$unsorted"
      rm -f "$unsorted"  # cleanup
      samtools index "$sortedbam"
    fi
  done

  #################### Step 4: featureCounts ####################
  log "[Step 4] Counting reads with featureCounts..."
  counts_file="$counts_dir/gene_counts.txt"
  if [[ -f "$counts_file" ]]; then
    log "featureCounts output found -> skipping"
  else
    bam_list=("$align_dir"/*_sorted.bam)
    if [[ ${#bam_list[@]} -eq 0 ]]; then
      log "[ERROR] No sorted BAMs in $align_dir."
      exit 1
    fi
    log "Running featureCounts with strandedness=$STRANDEDNESS..."
    featureCounts -T "$THREADS" -p -B -C \
      -s "$STRANDEDNESS" \
      -a "$GTF_ANNOTATION" \
      -o "$counts_file" "${bam_list[@]}" \
      && log "featureCounts success" \
      || { log "[ERROR] featureCounts failed."; exit 1; }
    [[ -s "$counts_file" ]] || {
      log "[ERROR] gene_counts.txt empty or missing."
      exit 1
    }
  fi

  #################### MultiQC (if available) ####################
  if [[ "${RUN_MULTIQC:-}" == true && $(command -v multiqc) ]]; then
    log "[Optional] Running multiQC to combine reports..."
    multiqc "$project_dir" -o "$project_dir/multiqc_report" \
      && log "multiQC finished" \
      || log "[WARNING] multiQC encountered an error."
  fi

  #################### Step 5: DESeq2 + GO in Rscript ####################
  log "[Step 5] DESeq2 + GO analysis..."
  deseq_csv="$analysis_dir/deseq2_results.csv"
  go_csv="$analysis_dir/GO_enrichment_results.csv"
  if [[ -f "$deseq_csv" && -f "$go_csv" ]]; then
    log "DESeq2 & GO results found -> skipping"
  else
    Rscript - <<RSCRIPT
suppressMessages(library(DESeq2))
suppressMessages(library(clusterProfiler))
suppressMessages(library(org.Mm.eg.db)) # using mouse as example
suppressMessages(library(ggplot2))

counts <- read.table("$counts_file", header=TRUE, sep="\t", comment.char="#", check.names=FALSE)
count_data <- counts[,7:ncol(counts)]   # from 7th col onward are sample counts
rownames(count_data) <- counts\$Geneid
colnames(count_data) <- sub(".sorted.bam$", "", colnames(count_data))

# Build condition from colnames
samples <- colnames(count_data)
conds <- ifelse(grepl("control", samples, ignore.case=TRUE), "control",
         ifelse(grepl("treatment", samples, ignore.case=TRUE), "treatment", "unknown"))
conds <- factor(conds)
col_data <- data.frame(row.names=samples, condition=conds)

dds <- DESeqDataSetFromMatrix(count_data, col_data, design=~condition)
dds <- DESeq(dds)
res <- results(dds, alpha=0.05)
res <- res[order(res\$padj),]
res_df <- as.data.frame(res)

write.csv(res_df, file="$analysis_dir/deseq2_results.csv", row.names=TRUE)

# PCA
vsd <- vst(dds)
pca_data <- plotPCA(vsd, intgroup="condition", returnData=TRUE)
percentVar <- round(100 * attr(pca_data, "percentVar"))
p <- ggplot(pca_data, aes(PC1, PC2, color=condition)) +
     geom_point(size=3) +
     xlab(paste0("PC1: ", percentVar[1], "% variance")) +
     ylab(paste0("PC2: ", percentVar[2], "% variance"))
ggsave("$analysis_dir/PCA_plot.png", p, width=6, height=5)

# MA
png("$analysis_dir/MA_plot.png", width=800, height=600)
plotMA(res, main="DESeq2 MA-Plot", ylim=c(-5,5))
dev.off()

# Volcano
res_df\$minusLog10P <- -log10(res_df\$pvalue)
res_df\$signif <- !is.na(res_df\$padj) & res_df\$padj < 0.05
png("$analysis_dir/Volcano_plot.png", width=800, height=600)
with(res_df, plot(log2FoldChange, minusLog10P, pch=20,
    col=ifelse(signif,"red","gray"),
    xlab="Log2 Fold Change", ylab="-Log10 p-value", main="Volcano"))
dev.off()

sig_genes <- rownames(res_df)[res_df\$signif]
if(length(sig_genes)==0){
  message("No significant genes -> no GO.")
  write.csv(data.frame(Message="No sig genes for GO"), "$analysis_dir/GO_enrichment_results.csv")
  quit()
}

all_genes <- rownames(res_df)

ego <- enrichGO(gene=sig_genes, universe=all_genes,
                OrgDb=org.Mm.eg.db, keyType="ENSEMBL",
                ont="BP", pAdjustMethod="BH", pvalueCutoff=0.05, qvalueCutoff=0.05)
ego_df <- as.data.frame(ego)
write.csv(ego_df, file="$analysis_dir/GO_enrichment_results.csv", row.names=FALSE)
if(nrow(ego_df)>0){
  png("$analysis_dir/GO_enrichment_top10.png", width=800, height=600)
  print(dotplot(ego, showCategory=10)+ggtitle("Top GO Terms"))
  dev.off()
}
RSCRIPT
    log "DESeq2 + GO done"
  fi

  log "===== Done with project: $project_dir ====="
done

echo "All pipeline steps completed successfully."
